#include <cstdio>
#include <queue>
using namespace std;
struct Node
{
    int x,y,z;
}node;
int n,m,slice,T;
int matrix[1290][130][61];
bool isQ[1290][130][61]={false};
int X[6]={0,0,0,0,1,-1};
int Y[6]={0,0,1,-1,0,0};
int Z[6]={1,-1,0,0,0,0};
bool judge(int x,int y,int z)
{
    if(x>=n||x<0||y>=m||y<0||z>=slice||z<0) return false;
    if(matrix[x][y][z]==0||isQ[x][y][z]==true) return false;
    return true;
}
int BFS(int x,int y,int z)
{
    int count1=0;
    queue<Node> Q;
    node.x=x,node.y=y,node.z=z;
    Q.push(node);
    isQ[x][y][z]=true;
    while(!Q.empty())
    {
        Node top=Q.front();
        Q.pop();
        count1++;
        for(int i=0;i<6;i++)
        {
            int newX=top.x+X[i];
            int newY=top.y+Y[i];
            int newZ=top.z+Z[i];
            if(judge(newX,newY,newZ))
            {
                node.x=newX,node.y=newY,node.z=newZ;
                Q.push(node);
                isQ[newX][newY][newZ]=true;
            }
        }
    }
    if(count1>=T) return count1;
    else return 0;
}
int main()
{
    scanf("%d%d%d%d",&n,&m,&slice,&T);
    for(int z=0;z<slice;z++)
    {
        for(int x=0;x<n;x++)
        {
            for(int y=0;y<m;y++)
            {
                scanf("%d",&matrix[x][y][z]);
            }
        }
    }
    int res=0;
    for(int z=0;z<slice;z++)
    {
        for(int x=0;x<n;x++)
        {
            for(int y=0;y<m;y++)
            {
                if(matrix[x][y][z]==1&&isQ[x][y][z]==false)
                {
                    res+=BFS(x,y,z);
                }
            }
        }
    }
    printf("%d\n",res);
    return 0;
}
