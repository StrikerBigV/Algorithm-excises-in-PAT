#include <cstdio>
#include <queue>
#include <stack>
#include <cstring>
using namespace std;
const int maxn=50;
int Pre[maxn],In[maxn];
int n,num=0;
stack<int> st;
struct treeNode
{
    int data;
    treeNode* lchild;
    treeNode* rchild;
};
treeNode* create(int preL,int preR,int inL,int inR)
{
    if(preL>preR) return NULL;
    treeNode* root=new treeNode;
    root->data=Pre[preL];
    int k;
    for(k=inL;k<=inR;k++)
    {
        if(In[k]==Pre[preL])
            break;
    }
    int numLeft=k-inL;
    root->lchild=create(preL+1,preL+numLeft,inL,k-1);
    root->rchild=create(preL+numLeft+1,preR,k+1,inR);
    return root;
}
void postOrder(treeNode* root)
{
    if(root==NULL) return;
    if(root->lchild!=NULL) postOrder(root->lchild);
    if(root->rchild!=NULL) postOrder(root->rchild);
    printf("%d",root->data);
    num++;
    if(num<n) printf(" ");
}
int main()
{
    scanf("%d",&n);
    int number,cnt1=0,cnt2=0;
    char str[5];
    for(int i=0;i<2*n;i++)
    {
        scanf("%s",str);
        if(strcmp(str,"Push")==0)
        {
            scanf("%d",&number);
            st.push(number);
            Pre[cnt1++]=number;
        }
        else
        {
            In[cnt2++]=st.top();
            st.pop();
        }
    }
    treeNode* root=create(0,n-1,0,n-1);
    postOrder(root);
    return 0;
}
