#include <cstdio>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;
const int maxn=100010;
struct Node
{
    vector<int> child;
}node[maxn];
int minDepth=maxn,num=0;
void DFS(int index,int depth)
{
    if(node[index].child.size()==0)
    {
        if(depth<minDepth)
        {
            minDepth=depth;
            num=1;
        }
        else if(depth==minDepth)
        {
            num++;
        }
        return;
    }
    for(int i=0;i<node[index].child.size();i++)
    {
        DFS(node[index].child[i],depth+1);
    }
}
int main()
{
    int n;
    double p,r;
    scanf("%d%lf%lf",&n,&p,&r);
    r/=100;
    int k,child;
    for(int i=0;i<n;i++)
    {
       scanf("%d",&k);
       if(k!=0)
       {
           for(int j=0;j<k;j++)
            {
                scanf("%d",&child);
                node[i].child.push_back(child);
            }
       }
    }
    DFS(0,0);
    printf("%.4f %d\n",p*pow(1+r,minDepth),num);
    return 0;
}
